X <- as.matrix(df$ln_export_area)
#  estimate the coeficients delta
#  delta = ((Z'Z)^(-1))Z'X
delta = solve(t(Z)%*%Z)%*%t(Z)%*%X
## calculate residuals
#  res = Z - delta1 - delta2*Z2
res <- as.matrix(Z-delta[1]-delta[2]*Z[,2])
## define the number of observations (n) and the number of
#  parameters (k)
n <- nrow(df)
k <- ncol(Z)
## calculate the Variance-Covariance matrix (VCV)
#  VCV = (1/(n-k))res'res(Z'Z)^(-1)
VCV <- 1/(n-k) * as.numeric(t(res)%*%res) * solve(t(Z)%*%Z)
## calculate standard errors (se) of coefficients
se <- sqrt(diag(VCV))
## calculate standard errors (se) of coefficients
se <- sqrt(diag(VCV))
## calculate the p-values
p_value <- rbind(2*pt(abs(delta[1]/se[1]), df=n-k,
lower.tail= FALSE),
2*pt(abs(delta[2]/se[2]), df=n-k,
lower.tail= FALSE))
## combine all necessary information
output <- as.data.frame(cbind(c("(Intercept)","height"),
delta,se,p_value))
names(output) <- c("Coefficients:","Estimate",
"Std. Error","Pr(>|t|)")
#compare automatic (lm) and manual output
# regressing X on Z should be the same as
output
# this reg includes the geography controls and the colonizer fixed effects
# regress X on Z (minDist)
reg <-  lm(ln_export_area ~ minDist + colony0 + colony1 + colony2 + colony3 + colony4 + colony5 + colony6 + colony7+abs_latitude + longitude + rain_min+ humid_max + low_temp + ln_coastline_area  ,  data=df)
coef_minDist = summary(reg)$coef[1:2,1]
# calculate the estimated ln_export_area using estimated deltas for each var in this regression
X_hat_controls = Z %*% coef_minDist
knitr::opts_chunk$set(echo = TRUE)
source("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R Programming/ttt.R")
source("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R Programming/ttt.R")
reticulate::repl_python()
import seaborn as sns
install.packages("reticulate")
use_python("/usr/local/bin/python")
reticulate::repl_python()
library(reticulate)
Y
use_python("/usr/local/bin/python")
import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset('iris')
iris
#import matplotlib.pyplot as plt
quit
reticulate::repl_python()
library(reticulate)
use_python("C:/Python38/")
#import seaborn as sns
#import matplotlib.pyplot as plt
quit
reticulate::repl_python()
library(reticulate)
#import seaborn as sns
#import matplotlib.pyplot as plt
import seaborn as sns
use_python("C:/Python38/")
quit
reticulate::repl_python()
library(reticulate)
use_python("C:/Python38/")
#import seaborn as sns
#import matplotlib.pyplot as plt
quit
library(reticulate)
reticulate::repl_python()
use_python("/usr/local/bin/python")
use_virtualenv("~/myenv")
use_condaenv("myenv")
#import seaborn as sns
#import matplotlib.pyplot as plt
quit
reticulate::repl_python()
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
#py_config()
library(reticulate)
quit
```{r}
```{r}
library(reticulate)
#use_python("/usr/local/bin/python3", required = T)
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
use_python("/usr/local/bin/python3", required = T)
library(reticulate)
use_python("/usr/local/bin/python3")
library(reticulate)
use_python("/usr/local/bin/python")
library(reticulate)
use_virtualenv("~/myenv")
library(reticulate)
library(ggplot2)
py <- reticulate::py  # Interface to python session
library(reticulate)
install.packages("ggplot2")
py <- reticulate::py  # Interface to python session
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
install.packages("ggplot2")
py <- reticulate::py  # Interface to python session
data(iris)
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
data(iris)
head(iris)
reticulate::repl_python()
# the "r" object is the interface to the R environment.
sns.regplot(
data=r.iris,
x="Sepal.Length",
y="Petal.Length"
).set(title="Relationship between sepal and petal length in Iris")
plt.show()
quit
library(ggplot2)
py <- reticulate::py  # Interface to python session
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
reticulate::repl_python()
import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset('iris')
iris
quit
library(reticulate)
library("ggplot2")
reticulate::use_python("/usr/bin/python3")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
library(reticulate)
py <- reticulate::py  # Interface to python session
data(iris)
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
reticulate::repl_python()
import seaborn as sns
import matplotlib.pyplot as plt
iris = sns.load_dataset('iris')
iris
quit
py <- reticulate::py  # Interface to python session
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data(iris)
ggplot(py$iris, aes(x = sepal_length, y = petal_length)) +
geom_point() +
stat_smooth(method = "lm") +
theme_bw(base_size = 13) +
ggtitle("Relationship between sepal and petal length in Iris")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data(iris)
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data(iris)
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data(iris)
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
d = data(iris)
d
#py_config()
#import seaborn as sns
#import matplotlib.pyplot as plt
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
py
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
read.csv(file = 'gapminder_clean.csv')
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data<-read.csv(file = 'gapminder_clean.csv')
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data<-read.csv(file = 'gapminder_clean.csv')
data[1, ]
data[5, ]
data$Agriculture..value.added....of.GDP.
install.packages(tidyverse)
install.packages("tidyverse")
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(tidyverse)
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data<-read.csv(file = 'gapminder_clean.csv')
my_data %>%
filter(col1 == 10 | col2 == "Yes") %>%
mutate(new_col = 10*col1) %>%
ggplot2(aes(x = col1, y = new_col)) +
geom_point() +
labs(title="some title") +
ggsave("my_plot.png")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
my_data %>%
filter(col1 == 10 | col2 == "Yes") %>%
mutate(new_col = 10*col1) %>%
ggplot2(aes(x = col1, y = new_col)) +
geom_point() +
labs(title="some title") +
ggsave("my_plot.png")
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(tidyverse)
library(reticulate)
library("ggplot2")
Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
py <- reticulate::py  # Interface to python session
data<-read.csv(file = 'gapminder_clean.csv')
my_data %>%
filter(col1 == 10 | col2 == "Yes") %>%
mutate(new_col = 10*col1) %>%
ggplot2(aes(x = col1, y = new_col)) +
geom_point() +
labs(title="some title") +
ggsave("my_plot.png")
data %>%
filter(col1 == 10 | col2 == "Yes") %>%
mutate(new_col = 10*col1) %>%
ggplot(aes(x = col1, y = new_col)) +
geom_point() +
labs(title="some title") +
ggsave("my_plot.png")
# ggplot(aes(x = col1, y = gdpPercap)) +
# geom_point() +
# labs(title="some title") +
# ggsave("my_plot.png")
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.)) #%>%
# ggplot(aes(x = col1, y = gdpPercap)) +
# geom_point() +
# labs(title="some title") +
# ggsave("my_plot.png")
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) #%>%
# ggplot(aes(x = col1, y = gdpPercap)) +
# geom_point() +
# labs(title="some title") +
# ggsave("my_plot.png")
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
ggplot(aes(x = logGDP, y = logCO2)) +
geom_point() +
labs(title="some title") #+
setwd("C:/Users/huixin/OneDrive - UC San Diego/bioinformatics/brn-training/R for Data Science")
library(tidyverse)
#library(reticulate)
library("ggplot2")
#Sys.setenv(RETICULATE_PYTHON = "/usr/bin/python3")
#py <- reticulate::py  # Interface to python session
data<-read.csv(file = 'gapminder_clean.csv')
data$gdpPercap
#data$gdpPercap
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
ggplot(aes(x = logGDP, y = logCO2)) +
geom_point() +
labs(title="log transformation of GDP (USD per capita) vs. log transformation of CO2 (metric tons per capita)") #+
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
ggplot(aes(x = logGDP, y = logCO2)) +
geom_point() +
labs(title="log trans. of GDP (USD per capita) vs. log trans. of CO2 (metric tons per capita)") #+
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
ggplot(aes(x = logGDP, y = logCO2)) +
geom_point() +
labs(title=" GDP (USD per capita) vs.CO2 (metric tons per capita) in 1962") #+
library(corrr)
install.packages('corr')
install.packages("installr")
library(installr)
updateR()
updateR()
library(corr)
install.packages('corr')
nstall.packages("corrr")
install.packages("corrr")
library(corrr)
penguins %>%
select(logCO2, logGDP) %>%
correlate()
data %>%
select(logCO2, logGDP) %>%
correlate()
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
correlate()
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
select(logCO2, logGDP) %>%
correlate()
for (i in c(Year)) {
data %>%
filter(var_a==i) %>%
select("var1", "var2", "var3", "var4", "var5", "var6", "var7", "var8") %>%
corlist[i] <- cor()
}
for (i in c(data$Year)) {
data %>%
filter(var_a==i) %>%
select("var1", "var2", "var3", "var4", "var5", "var6", "var7", "var8") %>%
corlist[i] <- cor()
}
data %>%
# filter(var_a==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
corlist[i] <- cor()
data %>%
# filter(var_a==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
#corlist[i] <- cor()
}
data %>%
# filter(var_a==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap)# %>%
data %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap, Year)# %>%
correlate()
```{r}
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(var==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap, Year)# %>%
correlate()
}
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap, Year)# %>%
correlate()
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap, Year) %>%
correlate()
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
correlate()
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
corlist[i] <-correlate()
, Year
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap, Year) %>%
correlate()
}
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
correlate()
}
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
correlate()
}
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year==i) %>%
select(CO2.emissions..metric.tons.per.capita., gdpPercap) %>%
correlate()
}
data %>%
filter(Year==i) %>%
print(i)
data %>%
filter(Year==i) %>%
print(Year)
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year == i) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
select(logCO2, logGDP) %>%
correlate()
}
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
ggplot(aes(x = logGDP, y = logCO2)) +
geom_point() +
labs(title=" GDP (USD per capita) vs.CO2 (metric tons per capita) in 1962") #+
# ggsave("my_plot.png")
data %>%
filter(Year == 1962) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
select(logCO2, logGDP) %>%
correlate()
corlist <- list()
for (i in c(data$Year)) {
data %>%
filter(Year == i) %>%
mutate(logCO2 = log(CO2.emissions..metric.tons.per.capita.),
logGDP = log(gdpPercap)) %>%
select(logCO2, logGDP) %>%
correlate()
}
